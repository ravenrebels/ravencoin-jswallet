{"mappings":"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","sources":["src/src/Types.ts","src/src/Errors.ts","src/src/blockchain/SendManyTransaction.ts","src/src/blockchain/sweep.ts","src/src/blockchain/Transaction.ts","src/src/getBaseCurrencyByNetwork.ts","src/src/contants.ts","src/src/getBalance.ts","src/src/getAssets.ts","src/src/ravencoinWallet.ts","src/ravencoinWallet.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,"import { getRPC, methods } from \"@ravenrebels/ravencoin-rpc\";\r\nimport RavencoinKey from \"@ravenrebels/ravencoin-key\";\r\nimport Signer from \"@ravenrebels/ravencoin-sign-transaction\";\r\nimport {\r\n  ChainType,\r\n  IAddressDelta,\r\n  IAddressMetaData,\r\n  IOptions,\r\n  ISend,\r\n  ISendManyOptions,\r\n  ISendResult,\r\n  IUTXO,\r\n  SweepResult,\r\n} from \"./Types\";\r\n\r\nimport { sweep } from \"./blockchain/sweep\";\r\nimport { Transaction } from \"./blockchain/Transaction\";\r\nimport { SendManyTransaction } from \"./blockchain/SendManyTransaction\";\r\nimport { getBaseCurrencyByNetwork } from \"./getBaseCurrencyByNetwork\";\r\nimport { getBalance } from \"./getBalance\";\r\nimport { ValidationError } from \"./Errors\";\r\nimport { getAssets } from \"./getAssets\";\r\n\r\nconst URL_MAINNET = \"https://rvn-rpc-mainnet.ting.finance/rpc\";\r\nconst URL_TESTNET = \"https://rvn-rpc-testnet.ting.finance/rpc\";\r\n\r\n//Avoid singleton (anti-pattern)\r\n//Meaning multiple instances of the wallet must be able to co-exist\r\n\r\nexport class Wallet {\r\n  rpc = getRPC(\"anonymous\", \"anonymous\", URL_MAINNET);\r\n  _mnemonic = \"\";\r\n  network: ChainType = \"rvn\";\r\n  addressObjects: Array<IAddressMetaData> = [];\r\n  receiveAddress = \"\";\r\n  changeAddress = \"\";\r\n  addressPosition = 0;\r\n  baseCurrency = \"RVN\"; //Default is RVN but it could be EVR\r\n  offlineMode = false;\r\n  setBaseCurrency(currency: string) {\r\n    this.baseCurrency = currency;\r\n  }\r\n  getBaseCurrency() {\r\n    return this.baseCurrency;\r\n  }\r\n  /**\r\n   * Sweeping a private key means to send all the funds the address holds to your your wallet.\r\n   * The private key you sweep do not become a part of your wallet.\r\n   *\r\n   * NOTE: the address you sweep needs to cointain enough RVN to pay for the transaction\r\n   *\r\n   * @param WIF the private key of the address that you want move funds from\r\n   * @returns either a string, that is the transaction id or null if there were no funds to send\r\n   */\r\n  sweep(WIF: string, onlineMode: boolean): Promise<SweepResult> {\r\n    const wallet = this;\r\n\r\n    return sweep(WIF, wallet, onlineMode);\r\n  }\r\n  getAddressObjects() {\r\n    return this.addressObjects;\r\n  }\r\n  getAddresses(): Array<string> {\r\n    const addresses = this.addressObjects.map((obj) => {\r\n      return obj.address;\r\n    });\r\n    return addresses;\r\n  }\r\n\r\n  async init(options: IOptions) {\r\n    let username = \"anonymous\";\r\n    let password = \"anonymous\";\r\n    let url = URL_MAINNET;\r\n\r\n    //VALIDATION\r\n    if (!options) {\r\n      throw Error(\"option argument is mandatory\");\r\n    }\r\n\r\n    if (options.offlineMode === true) {\r\n      this.offlineMode = true;\r\n    }\r\n    if (!options.mnemonic) {\r\n      throw Error(\"option.mnemonic is mandatory\");\r\n    }\r\n\r\n    url = options.rpc_url || url;\r\n    password = options.rpc_password || url;\r\n    username = options.rpc_username || url;\r\n\r\n    if (options.network) {\r\n      this.network = options.network;\r\n      this.setBaseCurrency(getBaseCurrencyByNetwork(options.network));\r\n    }\r\n    if (options.network === \"rvn-test\" && !options.rpc_url) {\r\n      url = URL_TESTNET;\r\n    }\r\n\r\n    this.rpc = getRPC(username, password, url);\r\n    this._mnemonic = options.mnemonic;\r\n\r\n    //Generating the hd key is slow, so we re-use the object\r\n    const hdKey = RavencoinKey.getHDKey(this.network, this._mnemonic);\r\n    const coinType = RavencoinKey.getCoinType(this.network);\r\n    const ACCOUNT = 0;\r\n\r\n    const minAmountOfAddresses = Number.isFinite(options.minAmountOfAddresses)\r\n      ? options.minAmountOfAddresses\r\n      : 0;\r\n\r\n    let doneDerivingAddresses = false;\r\n    while (doneDerivingAddresses === false) {\r\n      //We add new addresses to tempAddresses so we can check history for the last 20\r\n      const tempAddresses = [] as string[];\r\n\r\n      for (let i = 0; i < 20; i++) {\r\n        const external = RavencoinKey.getAddressByPath(\r\n          this.network,\r\n          hdKey,\r\n          `m/44'/${coinType}'/${ACCOUNT}'/0/${this.addressPosition}`\r\n        );\r\n\r\n        const internal = RavencoinKey.getAddressByPath(\r\n          this.network,\r\n          hdKey,\r\n          `m/44'/${coinType}'/${ACCOUNT}'/1/${this.addressPosition}`\r\n        );\r\n\r\n        this.addressObjects.push(external);\r\n        this.addressObjects.push(internal);\r\n        this.addressPosition++;\r\n\r\n        tempAddresses.push(external.address + \"\");\r\n        tempAddresses.push(internal.address + \"\");\r\n      }\r\n\r\n      if (\r\n        minAmountOfAddresses &&\r\n        minAmountOfAddresses >= this.addressPosition\r\n      ) {\r\n        //In case we intend to create extra addresses on startup\r\n        doneDerivingAddresses = false;\r\n      } else if (this.offlineMode === true) {\r\n        //BREAK generation of addresses and do NOT check history on the network\r\n        doneDerivingAddresses = true;\r\n      } else {\r\n        //If no history, break\r\n        doneDerivingAddresses =\r\n          false === (await this.hasHistory(tempAddresses));\r\n      }\r\n    }\r\n  }\r\n  async hasHistory(addresses: Array<string>): Promise<boolean> {\r\n    const includeAssets = true;\r\n    const obj = {\r\n      addresses,\r\n    };\r\n\r\n    const asdf = (await this.rpc(methods.getaddressbalance, [\r\n      obj,\r\n      includeAssets,\r\n    ])) as any;\r\n\r\n    //@ts-ignore\r\n    const hasReceived = Object.values(asdf).find((asset) => asset.received > 0);\r\n\r\n    return !!hasReceived;\r\n  }\r\n\r\n  async _getFirstUnusedAddress(external: boolean) {\r\n    //First, check if lastReceivedAddress\r\n    if (external === true && this.receiveAddress) {\r\n      const asdf = await this.hasHistory([this.receiveAddress]);\r\n      if (asdf === false) {\r\n        return this.receiveAddress;\r\n      }\r\n    }\r\n    if (external === false && this.changeAddress) {\r\n      const asdf = await this.hasHistory([this.changeAddress]);\r\n      if (asdf === false) {\r\n        return this.changeAddress;\r\n      }\r\n    }\r\n\r\n    //First make a list of relevant addresses, either external (even) or change (odd)\r\n    const addresses: string[] = [];\r\n\r\n    this.getAddresses().map(function (address: string, index: number) {\r\n      if (external === true && index % 2 === 0) {\r\n        addresses.push(address);\r\n      } else if (external === false && index % 2 !== 0) {\r\n        addresses.push(address);\r\n      }\r\n    });\r\n\r\n    //Use BINARY SEARCH\r\n\r\n    // Binary search implementation to find the first item with `history` set to false\r\n    const binarySearch = async (_addresses: string[]) => {\r\n      let low = 0;\r\n      let high = _addresses.length - 1;\r\n      let result = \"\";\r\n\r\n      while (low <= high) {\r\n        const mid = Math.floor((low + high) / 2);\r\n        const addy = _addresses[mid];\r\n\r\n        const hasHistory = await this.hasHistory([addy]);\r\n        if (hasHistory === false) {\r\n          result = addy;\r\n          high = mid - 1; // Continue searching towards the left\r\n        } else {\r\n          low = mid + 1; // Continue searching towards the right\r\n        }\r\n      }\r\n\r\n      return result;\r\n    };\r\n\r\n    const result = await binarySearch(addresses);\r\n\r\n    if (!result) {\r\n      //IF we have not found one, return the first address\r\n      return addresses[0];\r\n    }\r\n    if (external === true) {\r\n      this.receiveAddress = result;\r\n    } else {\r\n      this.changeAddress = result;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  async getHistory(): Promise<IAddressDelta[]> {\r\n    const assetName = \"\"; //Must be empty string, NOT \"*\"\r\n    const addresses = this.getAddresses();\r\n    const deltas = this.rpc(methods.getaddressdeltas, [\r\n      { addresses, assetName },\r\n    ]);\r\n    //@ts-ignore\r\n    const addressDeltas: IAddressDelta[] = deltas as IAddressDelta[];\r\n    return addressDeltas;\r\n  }\r\n  async getMempool(): Promise<IAddressDelta[]> {\r\n    const method = methods.getaddressmempool;\r\n    const includeAssets = true;\r\n    const params = [{ addresses: this.getAddresses() }, includeAssets];\r\n    return this.rpc(method, params) as Promise<IAddressDelta[]>;\r\n  }\r\n  async getReceiveAddress() {\r\n    const isExternal = true;\r\n    return this._getFirstUnusedAddress(isExternal);\r\n  }\r\n\r\n  async getChangeAddress() {\r\n    const isExternal = false;\r\n    return this._getFirstUnusedAddress(isExternal);\r\n  }\r\n  /**\r\n   *\r\n   * @param assetName if present, only return UTXOs for that asset, otherwise for all assets\r\n   * @returns UTXOs for assets\r\n   */\r\n  async getAssetUTXOs(assetName?: string): Promise<IUTXO[]> {\r\n    //If no asset name, set to wildcard, meaning all assets\r\n    const _assetName = !assetName ? \"*\" : assetName;\r\n    const chainInfo = false;\r\n    const params = [\r\n      { addresses: this.getAddresses(), chainInfo, assetName: _assetName },\r\n    ];\r\n\r\n    return this.rpc(methods.getaddressutxos, params);\r\n  }\r\n  async getUTXOs() {\r\n    return this.rpc(methods.getaddressutxos, [\r\n      { addresses: this.getAddresses() },\r\n    ]);\r\n  }\r\n\r\n  getPrivateKeyByAddress(address: string) {\r\n    const f = this.addressObjects.find((a) => a.address === address);\r\n\r\n    if (!f) {\r\n      return undefined;\r\n    }\r\n    return f.WIF;\r\n  }\r\n  async sendRawTransaction(raw: string): Promise<string> {\r\n    return this.rpc(\"sendrawtransaction\", [raw]);\r\n  }\r\n\r\n  async send(options: ISend): Promise<ISendResult> {\r\n    //ACTUAL SENDING TRANSACTION\r\n\r\n    //Important, do not swallow the exceptions/errors of createTransaction, let them fly\r\n    const sendResult: ISendResult = await this.createTransaction(options);\r\n\r\n    try {\r\n      const id = await this.rpc(\"sendrawtransaction\", [\r\n        sendResult.debug.signedTransaction,\r\n      ]);\r\n      sendResult.transactionId = id;\r\n\r\n      return sendResult;\r\n    } catch (e) {\r\n      throw new Error(\r\n        \"Error while sending, perhaps you have pending transaction? Please try again.\"\r\n      );\r\n    }\r\n  }\r\n\r\n  async sendMany({ outputs, assetName }: ISendManyOptions) {\r\n    const options = {\r\n      wallet: this,\r\n      outputs,\r\n      assetName,\r\n    };\r\n    const sendResult: ISendResult = await this.createSendManyTransaction(\r\n      options\r\n    );\r\n\r\n    //ACTUAL SENDING TRANSACTION\r\n    //Important, do not swallow the exceptions/errors of createSendManyTransaction, let them fly\r\n\r\n    try {\r\n      const id = await this.rpc(\"sendrawtransaction\", [\r\n        sendResult.debug.signedTransaction,\r\n      ]);\r\n      sendResult.transactionId = id;\r\n\r\n      return sendResult;\r\n    } catch (e) {\r\n      throw new Error(\r\n        \"Error while sending, perhaps you have pending transaction? Please try again.\"\r\n      );\r\n    }\r\n  }\r\n  /**\r\n   * Does all the heavy lifting regarding creating a SendManyTransaction\r\n   * but it does not broadcast the actual transaction.\r\n   * Perhaps the user wants to accept the transaction fee?\r\n   * @param options\r\n   * @returns An transaction that has not been broadcasted\r\n   */\r\n  async createTransaction(options: ISend): Promise<ISendResult> {\r\n    const { amount, toAddress } = options;\r\n    let { assetName } = options;\r\n\r\n    if (!assetName) {\r\n      assetName = this.baseCurrency;\r\n    }\r\n\r\n    //Validation\r\n    if (!toAddress) {\r\n      throw Error(\"Wallet.send toAddress is mandatory\");\r\n    }\r\n    if (!amount) {\r\n      throw Error(\"Wallet.send amount is mandatory\");\r\n    }\r\n    const changeAddress = await this.getChangeAddress();\r\n\r\n    if (changeAddress === toAddress) {\r\n      throw new Error(\"Change address cannot be the same as toAddress\");\r\n    }\r\n    const transaction = new Transaction({\r\n      assetName,\r\n      amount,\r\n      toAddress,\r\n      wallet: this,\r\n    });\r\n\r\n    await transaction.loadData();\r\n\r\n    const inputs = transaction.getInputs();\r\n    const outputs = await transaction.getOutputs();\r\n\r\n    const privateKeys = transaction.getPrivateKeys();\r\n\r\n    const raw = await this.rpc(\"createrawtransaction\", [inputs, outputs]);\r\n    const signed = Signer.sign(\r\n      this.network,\r\n      raw,\r\n      transaction.getUTXOs(),\r\n      privateKeys\r\n    );\r\n\r\n    //ACTUAL SENDING TRANSACTION\r\n    try {\r\n      //   const id = await this.rpc(\"sendrawtransaction\", [signed]);\r\n      const sendResult: ISendResult = {\r\n        transactionId: null,\r\n        debug: {\r\n          amount,\r\n          assetName,\r\n          fee: transaction.getFee(),\r\n          inputs,\r\n          outputs,\r\n          privateKeys,\r\n          rawUnsignedTransaction: raw,\r\n          rvnChangeAmount: transaction.getBaseCurrencyChange(),\r\n          rvnAmount: transaction.getBaseCurrencyAmount(),\r\n          signedTransaction: signed,\r\n          UTXOs: transaction.getUTXOs(),\r\n        },\r\n      };\r\n      return sendResult;\r\n    } catch (e) {\r\n      throw new Error(\r\n        \"Error while sending, perhaps you have pending transaction? Please try again.\"\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Does all the heavy lifting regarding creating a transaction\r\n   * but it does not broadcast the actual transaction.\r\n   * Perhaps the user wants to accept the transaction fee?\r\n   * @param options\r\n   * @returns An transaction that has not been broadcasted\r\n   */\r\n  async createSendManyTransaction(options: {\r\n    assetName?: string;\r\n    outputs: { [key: string]: number };\r\n  }): Promise<ISendResult> {\r\n    let { assetName } = options;\r\n\r\n    if (!assetName) {\r\n      assetName = this.baseCurrency;\r\n    }\r\n\r\n    //Validation\r\n    if (!options.outputs) {\r\n      throw Error(\"Wallet.createSendManyTransaction outputs is mandatory\");\r\n    } else if (Object.keys(options.outputs).length === 0) {\r\n      throw new ValidationError(\r\n        \"outputs is mandatory, shoud be an object with address as keys and amounts (numbers) as values\"\r\n      );\r\n    }\r\n    const changeAddress = await this.getChangeAddress();\r\n\r\n    const toAddresses = Object.keys(options.outputs);\r\n    if (toAddresses.includes(changeAddress)) {\r\n      throw new Error(\"You cannot send to your current change address\");\r\n    }\r\n    const transaction = new SendManyTransaction({\r\n      assetName,\r\n      outputs: options.outputs,\r\n      wallet: this,\r\n    });\r\n\r\n    await transaction.loadData();\r\n\r\n    const inputs = transaction.getInputs();\r\n    const outputs = await transaction.getOutputs();\r\n\r\n    const privateKeys = transaction.getPrivateKeys();\r\n\r\n    const raw = await this.rpc(\"createrawtransaction\", [inputs, outputs]);\r\n    const signed = Signer.sign(\r\n      this.network,\r\n      raw,\r\n      transaction.getUTXOs(),\r\n      privateKeys\r\n    );\r\n\r\n    try {\r\n      const sendResult: ISendResult = {\r\n        transactionId: null,\r\n        debug: {\r\n          amount: transaction.getAmount(),\r\n          assetName,\r\n          fee: transaction.getFee(),\r\n          inputs,\r\n          outputs,\r\n          privateKeys,\r\n          rawUnsignedTransaction: raw,\r\n          rvnChangeAmount: transaction.getBaseCurrencyChange(),\r\n          rvnAmount: transaction.getBaseCurrencyAmount(),\r\n          signedTransaction: signed,\r\n          UTXOs: transaction.getUTXOs(),\r\n        },\r\n      };\r\n      return sendResult;\r\n    } catch (e) {\r\n      throw new Error(\r\n        \"Error while sending, perhaps you have pending transaction? Please try again.\"\r\n      );\r\n    }\r\n  }\r\n\r\n  async getAssets() {\r\n    return getAssets(this, this.getAddresses());\r\n  }\r\n  async getBalance() {\r\n    const a = this.getAddresses();\r\n    return getBalance(this, a);\r\n  }\r\n}\r\n\r\nexport default {\r\n  createInstance,\r\n  getBaseCurrencyByNetwork\r\n};\r\nexport async function createInstance(options: IOptions): Promise<Wallet> {\r\n  const wallet = new Wallet();\r\n  await wallet.init(options);\r\n  return wallet;\r\n}\r\n"],"names":[],"version":3,"file":"types.d.ts.map"}